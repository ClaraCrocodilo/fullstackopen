{"version":3,"sources":["services/numbers.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","updatedPerson","put","delete","Notification","message","isError","className","Filter","filter","handleFilterChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","persons","deleteNumber","person","name","toLowerCase","includes","map","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","notificationError","setNotificationError","useEffect","numberService","initialNumbers","event","target","preventDefault","window","confirm","p","returnedPerson","setTimeout","catch","error","concat","returnedData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.523aab07.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n};\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, updatedPerson) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedPerson);\n    return request.then(response => response.data);\n};\nconst deleteNumber = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request.then(response => response.data);\n};\n\nexport default { getAll, create, update, deleteNumber };\n","import React, { useState, useEffect } from 'react';\nimport numberService from './services/numbers';\n\nconst Notification = ({ message, isError }) => {\n    if (message === null) {\n        return null;\n    };\n\n    return (\n        <div className={isError ? \"error\" : \"notification\"}>\n            {message}\n        </div>\n    )\n};\n\nconst Filter = ({ filter, handleFilterChange }) => (\n    <form>\n        <div>\n            filter shown with <input\n                value={filter}\n                onChange={handleFilterChange}\n            />\n        </div>\n    </form>\n);\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => (\n    <form onSubmit={addPerson}>\n        <div>\n            name: <input\n                value={newName}\n                onChange={handleNameChange}\n            />\n        </div>\n        <div>\n            number: <input\n                value={newNumber}\n                onChange={handleNumberChange}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n);\n\nconst Persons = ({ persons, filter, deleteNumber }) => (\n    <>\n        {persons.filter(person => person.name.toLowerCase()\n            .includes(filter.toLowerCase()))\n                .map(person => {\n                    return (\n                        <div key={person.name}>\n                            {person.name} {person.number}\n                            <button onClick={deleteNumber(person)}>\n                                delete\n                            </button>\n                        </div>\n                    );\n                })\n        }\n    </>\n);\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState('');\n    const [newNumber, setNewNumber] = useState('');\n    const [filter, setFilter] = useState('');\n    const [notificationMessage, setNotificationMessage] = useState(null);\n    const [notificationError, setNotificationError] = useState(false);\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value);\n    };\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value);\n    };\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value);\n    };\n\n    const hook = () => {\n        numberService\n            .getAll()\n            .then(initialNumbers => setPersons(initialNumbers))\n    };\n    useEffect(hook, []);\n\n    const addPerson = (event) => {\n        event.preventDefault();\n        if (persons.map(person => person.name).includes(newName)) {\n            if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\n                const updatedPerson = persons.filter(p => p.name === newName)[0];\n                updatedPerson.number = newNumber;\n                const id = updatedPerson.id;\n                numberService\n                    .update(id, updatedPerson)\n                    .then(returnedPerson => {\n                        setPersons(persons.map(p => p.id != id ? p : returnedPerson))\n                        setNotificationError(false);\n                        setNotificationMessage(`Updated ${returnedPerson.name}`);\n                        setTimeout(() => {\n                            setNotificationMessage(null);\n                        }, 5000);\n                    })\n                    .catch(error => {\n                        setNotificationError(true);\n                        setNotificationMessage(`Information of ${updatedPerson.name} has already been removed from server`);\n                        setTimeout(() => {\n                            setNotificationMessage(null);\n                        }, 5000);\n                        setPersons(persons.filter(p => p.id !== id));\n                    });\n            };\n        } else {\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            };\n            numberService\n                .create(newPerson)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson));\n                    setNotificationError(false);\n                    setNotificationMessage(`Added ${returnedPerson.name}`)\n                    setTimeout(() => {\n                        setNotificationMessage(null);\n                    }, 5000);\n                });\n        };\n};\n\n    const deleteNumber = (person) => () => {\n        if (window.confirm(`Delete ${person.name}?`)) {\n            numberService.deleteNumber(person.id)\n                .then(returnedData => {\n                    setPersons(persons.filter(p => p.id !== person.id))\n                });\n        };\n};\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            <Notification message={notificationMessage} isError={notificationError} />\n\n            <Filter filter={filter} handleFilterChange={handleFilterChange}/>\n\n            <h3>add a new</h3>\n            \n            <PersonForm\n                addPerson={addPerson}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n            />\n\n            <h3>Numbers</h3>\n\n            <Persons persons={persons} filter={filter} deleteNumber={deleteNumber}/>\n        </div>\n    )\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}